name: ML CI/CD Pipeline

# Trigger the workflow on push or pull request events but only for the "main" branch
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  # First job: Build and Test
  build-and-test:
    runs-on: ubuntu-latest  # Use the latest Ubuntu virtual machine

    steps:
    # Step 1: Check out code
    # This step downloads your repository under $GITHUB_WORKSPACE, so your job can access it
    - name: Checkout code
      uses: actions/checkout@v3

    # Step 2: Set up Python environment
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: "3.9"

    # Step 3: Install dependencies
    # Install all dependencies defined in requirements.txt using pip
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    # Step 4: (Optional) Lint with Flake8
    # Check code style with flake8
    - name: Lint with Flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    # Step 5: Run unit tests
    # Run all tests in the tests/ directory
    - name: Run unit tests
      run: pytest tests/

    # Step 6: Run model training
    # This should be a small-scale training to ensure the workflow runs through
    - name: Run small-scale training
      run: python train.py

    # Step 7: Evaluate model performance
    # Run the performance check script. This step will fail if accuracy is below the threshold
    - name: Evaluate model and check performance threshold
      run: python check_performance.py

    # Step 8: Upload model artifact
    # If all previous steps succeed, upload the artifacts folder
    # This allows subsequent jobs (like deployment) to download and use it
    - name: Upload model artifact
      uses: actions/upload-artifact@v3
      with:
        name: model-artifact
        path: artifacts/

# Job 2: Deploy
  deploy:
    # Dependency: This job will only run after the 'build-and-test' job completes successfully
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    # Step 1: Download the model artifact uploaded by the previous job
    - name: Download model artifact
      uses: actions/download-artifact@v3
      with:
        name: model-artifact
        path: artifacts/ # Download to the 'artifacts/' directory in the runner's workspace

    # Simulated deployment: Just print a message
    - name: Simulate deployment to staging
      run: |
        echo "Deploying new model..."
        ls -R artifacts/
        echo "Deployment complete!"